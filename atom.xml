<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hamish Rickerby]]></title>
  <link href="https://hamishrickerby.com/atom.xml" rel="self"/>
  <link href="https://hamishrickerby.com/"/>
  <updated>2016-08-04T21:42:06+10:00</updated>
  <id>https://hamishrickerby.com/</id>
  <author>
    <name><![CDATA[Hamish Rickerby]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interface Segregation]]></title>
    <link href="https://hamishrickerby.com/2016/08/04/interface-segregation/"/>
    <updated>2016-08-04T09:28:17+10:00</updated>
    <id>https://hamishrickerby.com/2016/08/04/interface-segregation</id>
    <content type="html"><![CDATA[<p>The Interface Segregation principle (part of <a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">S.O.L.I.D.</a>) is about, very simply, not making subclasses or clients implement interfaces they&rsquo;re not concerned with. <a href="https://drive.google.com/a/simplemachines.com.au/file/d/0BwhCYaYDn8EgOTViYjJhYzMtMzYxMC00MzFjLWJjMzYtOGJiMDc5N2JkYmJi/view">Robert Martin</a> calls these &lsquo;fat&rsquo; interfaces. They contain functions or methods that are unrelated to each other, and could be split out into more cohesive interfaces.</p>

<p>Forcing clients to implement interfaces they&rsquo;re not concerned with causes unnecessary tight coupling of the client to the interface. If the interface changes, the client needs to reimplement/update itself even if it doesn&rsquo;t use that specific interface function. The result is wasted development effort in maintaining unnecessary code for testing and implementation. This should be avoided.</p>

<p>Issues with interface definition can arise in languages that support <a href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)">inheritance</a>, <a href="https://en.wikipedia.org/wiki/Subtyping">subtype</a> conformance, or concepts like <a href="https://en.wikipedia.org/wiki/Interface_%28Java%29">Interface</a> or <a href="https://en.wikipedia.org/wiki/Protocol_(object-oriented_programming)">Protocol</a>. Specifically, issues are more likely to occur when an object or type can only inherit/implement one super-class or protocol/interface, such as with inheritance with (most) object-oriented languages. C++ is a notable exception here with support for multiple-inheritance, and implementation of protocols/interfaces via abstract base classes with pure virtual functions. The majority of languages I&rsquo;ve seen that support the concept of interfaces, also support multiple interface inheritance. This is supported in Swift, Java, and Objective-C. Ruby can support this via the include statement, although the duck typing removals the formal need for this definition - same with Python. Haskell supports this via type class conformance.</p>

<h2>Show me some code</h2>

<p>Here&rsquo;s a contrived example of an interface that tries to do too much. It&rsquo;s in swift, but it should be understandable. Lets say we&rsquo;re modelling animals.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">protocol</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">species</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">legs</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">speak</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">birth</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Animal</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we define a couple of animals.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">Dog</span><span class="p">:</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">species</span> <span class="o">=</span> <span class="s">&quot;Canis lupus familiaris&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">var</span> <span class="n">legs</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">speak</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Woof&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">birth</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Dog</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Cat</span><span class="p">:</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">species</span> <span class="o">=</span> <span class="s">&quot;Felis catus&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">var</span> <span class="n">legs</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">speak</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Meow&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">birth</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Cat</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This all seems fine, but becomes unstuck when we attempt to model something <a href="https://en.wikipedia.org/wiki/Oviparity">Oviparous</a>, or a sterile hybrid.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">class</span> <span class="nl">Chicken</span><span class="p">:</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">species</span> <span class="o">=</span> <span class="s">&quot;Gallus gallus domesticus&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">var</span> <span class="n">legs</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">speak</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Cluck&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">birth</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Chickens have eggs, not chickens. </span>
</span><span class='line'>    <span class="c1">// And they don&#39;t &quot;birth&quot; them. They lay them.</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Mule</span><span class="p">:</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">species</span> <span class="o">=</span> <span class="s">&quot;Equus asinus x Equus caballus&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">var</span> <span class="n">legs</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">speak</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Bray&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">birth</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Uh oh, Mules are typically sterile. They can&#39;t reproduce.</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The interface for Animal forces all animals to be able to birth things, and not all animals do. To solve this, I see a couple of options.</p>

<ul>
<li>We make the <code>birth()</code> function optional</li>
<li>We extract the <code>birth()</code> function out to a separate <code>Protocol</code> and compose multiple protocols together</li>
</ul>


<p>Personally I prefer the extraction of the function to a separate protocol. If we made the <code>birth()</code> function optional, any object that attempts to use it on any animal will need to ensure it&rsquo;s available before it can use it, and potentially force consumers of a function that uses that function to also deal with optional returns.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">func</span> <span class="n">birthSays</span><span class="p">(</span><span class="nl">parent</span><span class="p">:</span> <span class="n">Animal</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="k">let</span> <span class="n">child</span> <span class="o">=</span> <span class="n">parent</span><span class="p">.</span><span class="n">birth</span><span class="p">()</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">child</span><span class="p">.</span><span class="n">speak</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the <code>birth()</code> function is extracted out, then:</p>

<ol>
<li>Chickens and Mules won&rsquo;t need to implement the <code>birth()</code> method, and</li>
<li>We can typecheck methods so we don&rsquo;t need optionals, in languages that support this construct.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">protocol</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">species</span><span class="p">:</span> <span class="n">String</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">legs</span><span class="p">:</span> <span class="n">Int</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">speak</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protocol</span> <span class="n">Egg</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">hatch</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Animal</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protocol</span> <span class="n">Viviparous</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">birth</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Animal</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">protocol</span> <span class="n">Oviparous</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">lay</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Egg</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">ChickenEgg</span><span class="p">:</span> <span class="n">Egg</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">hatch</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Chicken</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nl">Chicken</span><span class="p">:</span> <span class="n">Animal</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="n">species</span> <span class="o">=</span> <span class="s">&quot;Gallus gallus domesticus&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">var</span> <span class="n">legs</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">func</span> <span class="n">speak</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Cluck&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">extension</span> <span class="nl">Chicken</span><span class="p">:</span> <span class="n">Oviparious</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">func</span> <span class="n">lay</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Egg</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ChickenEgg</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">birthSays</span><span class="p">(</span><span class="nl">parent</span><span class="p">:</span> <span class="n">Viviparous</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">parent</span><span class="p">.</span><span class="n">birth</span><span class="p">().</span><span class="n">speak</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see above that the Chicken is no longer required to implement birth. Through conformance to multiple, specific/detailed protocols it only needs to support functions and properties that make sense to that specific Class. This splitting of protocols alse ensures that we can typecheck inputs to functions, reducing the need for boilerplate code performing nil checks on optionals.</p>

<h3>Surprising Usage</h3>

<p>To illustrate another benefit of small interfaces, we consider the relationship between parents and children. If the relationship between two entities is abstracted out and made generic, we can think of it as a Node in a Graph, with a parent (node), and multiple children (other nodes).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">protocol</span> <span class="n">Node</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">parent</span><span class="p">:</span> <span class="n">Node</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">var</span> <span class="nl">children</span><span class="p">:</span> <span class="p">[</span><span class="n">Node</span><span class="p">]</span> <span class="p">{</span> <span class="kr">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this view of a <code>Node</code>, we can model families of Viviparous animals. A Dog can return it&rsquo;s children, and they can reference their parents. This <code>Node</code> however, can also be reused for any directed graph, such as dependencies between different software libraries. If a client implements a function to produce a family tree of Dogs via the <code>Node</code> interface, the exact same code can be reused to produce a tree of library dependencies, as it&rsquo;s based on the generic <code>Node</code>, not <code>Animal</code>.</p>

<p><em>hat tip to <a href="https://twitter.com/triggernz">@triggerNZ</a> for this example</em></p>

<p>Interface Segregation is one of the S.O.L.I.D. principles (I). Through ensuring that your interfaces small, targetted, and cohesive, you simplify implementation for clients. Clients won&rsquo;t be required to implement interfaces that don&rsquo;t make sense in the context of their object. Your interfaces also have greater opportunities for reuse, due to being more composable. Clients will be forced to change less, as only changes that impact their operation will need to be managed, rather than interface changes that they don&rsquo;t care about.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wrapping 3rd Party Code]]></title>
    <link href="https://hamishrickerby.com/2016/07/25/wrapping-3rd-party-code/"/>
    <updated>2016-07-25T13:05:35+10:00</updated>
    <id>https://hamishrickerby.com/2016/07/25/wrapping-3rd-party-code</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been integrating a system I&rsquo;ve been developing with a third party service for data synchronisation. We&rsquo;re looking to synchronise tasks out with systems like Pivotal Tracker, Jira, Trello etc, but were unsure which of those systems we would actually use. I&rsquo;m currently <a href="https://hamishrickerby.com/books/">reading</a> <a href="https://www.bookdepository.com/Clean-Code-Robert-C-Martin/9780132350884?a_aid=rickerbh">Clean Code</a>, and there&rsquo;s a really interesting and relevant chapter on &ldquo;Boundaries&rdquo;. It covers a similar scenario to what we were facing: <em>Using Third-Party Code</em>.</p>

<h2>Isolation</h2>

<p>Generally, you should wrap any third party code that you&rsquo;re dependent on with your own interfaces for that code. That way you get to define <em>how</em> your main application logic interfaces with the third party code, rather than having to have to bend your application to conform to a third party library, API, or applications structure. Isolating the complexities of dealing with third parties within an application to a particular class or module behind an interface that you control also allows you to:</p>

<ol>
<li>deal with changes to that third party (e.g., API upgrade)</li>
<li>swap out that integration with another one</li>
</ol>


<p>If we were building direct integration (with a project management tool like Jira, Pivotal Tracker, Trello) into our application, the models and interfaces of the third party system would leak into our core system.</p>

<p><em>Our application has support for Projects, Stories and Epics. Pivotal Tracker models these entities as well, but the relationship between Stories and Epics is based on a labelId assigned to the Epic at Pivotal. To attach a story to an epic we actually attach it to the label of the epic. Pivotal Tracker also handles story creation with labels/epics differently from story updates with labels/epics. Epics were introduced with v5 of the Tracker API. Previously, they didn&rsquo;t exist as a concept.</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">saveStoryCallback</span> <span class="o">=</span> <span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">error</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">handleError</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">story</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span>
</span><span class='line'>  <span class="c1">// Perform other post-save actions (eg, update aggregated or count fields)</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Sync with Pivotal</span>
</span><span class='line'>  <span class="kd">let</span> <span class="nx">labelId</span> <span class="o">=</span> <span class="kc">null</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">story</span><span class="p">.</span><span class="nx">epic</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">epicModel</span> <span class="o">=</span> <span class="nx">story</span><span class="p">.</span><span class="nx">epic</span><span class="p">.</span><span class="nx">syncData</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">epicModel</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">labelId</span> <span class="o">=</span> <span class="nx">pivotal</span><span class="p">.</span><span class="nx">getEpic</span><span class="p">(</span><span class="nx">epicModel</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">labelId</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">data</span> <span class="o">=</span> <span class="nx">pivotal</span><span class="p">.</span><span class="nx">createEpic</span><span class="p">(</span><span class="nx">story</span><span class="p">.</span><span class="nx">epic</span><span class="p">.</span><span class="nx">pivotalModel</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">story</span><span class="p">.</span><span class="nx">epic</span><span class="p">.</span><span class="nx">syncData</span> <span class="o">=</span> <span class="nx">data</span>
</span><span class='line'>      <span class="nx">labelId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">labelId</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">storyModel</span> <span class="o">=</span> <span class="nx">story</span><span class="p">.</span><span class="nx">syncData</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">storyModel</span> <span class="o">&amp;&amp;</span> <span class="nx">pivotal</span><span class="p">.</span><span class="nx">getStory</span><span class="p">(</span><span class="nx">storyModel</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">pivotal</span><span class="p">.</span><span class="nx">updateStory</span><span class="p">(</span><span class="nx">story</span><span class="p">.</span><span class="nx">pivotalModel</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">story</span><span class="p">.</span><span class="nx">syncData</span> <span class="o">=</span> <span class="nx">pivotal</span><span class="p">.</span><span class="nx">createStory</span><span class="p">(</span><span class="nx">story</span><span class="p">.</span><span class="nx">pivotalModel</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">labelId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">pivotal</span><span class="p">.</span><span class="nx">attachLabel</span><span class="p">(</span><span class="nx">story</span><span class="p">,</span> <span class="nx">labelId</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our save story callback will need to deal with the intricacies of the external system/library. If we wanted to swap this out for another tool (e.g. Trello) we&rsquo;d need to completely rewrite the logic in our save story callback, which is intermingled with core application logic. If we wanted to model the same synchronisation process with Trello, the logic would be different because the external model is different. We&rsquo;d model epics as a Board, and stories as a Card.</p>

<p>To avoid changes to our core application logic, we need to isolate the synchronisation logic behind an interface that represents entities in the language of our application, not the third party application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">getStory</span> <span class="o">=</span> <span class="p">(</span><span class="nx">story</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">syncStory</span> <span class="o">=</span> <span class="p">(</span><span class="nx">story</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">deleteStory</span> <span class="o">=</span> <span class="p">(</span><span class="nx">story</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">syncProject</span> <span class="o">=</span> <span class="p">(</span><span class="nx">project</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">deleteProject</span> <span class="o">=</span> <span class="p">(</span><span class="nx">project</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">syncEpic</span> <span class="o">=</span> <span class="p">(</span><span class="nx">epic</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">deleteEpic</span> <span class="o">=</span> <span class="p">(</span><span class="nx">epic</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, we need to implement an <a href="https://en.wikipedia.org/wiki/Adapter_pattern">adapter</a> to interface with one of the third parties. Lets say we&rsquo;re interacting with Pivotal again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">syncEpic</span><span class="p">,</span> <span class="nx">syncStory</span> <span class="p">}</span> <span class="nx">from</span> <span class="s2">&quot;sync-adapter&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">saveStoryCallback</span> <span class="o">=</span> <span class="p">(</span><span class="nx">response</span><span class="p">,</span> <span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">error</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">handleError</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">story</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span>
</span><span class='line'>  <span class="c1">// Perform other post-save actions (eg, update aggregated or count fields)</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">syncEpic</span><span class="p">(</span><span class="nx">story</span><span class="p">.</span><span class="nx">epic</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">syncStory</span><span class="p">(</span><span class="nx">story</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then in our sync-module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">const</span> <span class="nx">syncEpic</span> <span class="o">=</span> <span class="p">(</span><span class="nx">epic</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">epic</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">epicModel</span> <span class="o">=</span> <span class="nx">epic</span><span class="p">.</span><span class="nx">syncData</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">epicModel</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">labelId</span> <span class="o">=</span> <span class="nx">pivotal</span><span class="p">.</span><span class="nx">getEpic</span><span class="p">(</span><span class="nx">epicModel</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">labelId</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">data</span> <span class="o">=</span> <span class="nx">pivotal</span><span class="p">.</span><span class="nx">createEpic</span><span class="p">(</span><span class="nx">epic</span><span class="p">.</span><span class="nx">pivotalModel</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">epic</span><span class="p">.</span><span class="nx">syncData</span> <span class="o">=</span> <span class="nx">data</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we need to swap out Pivotal for Trello, we can simply replace the contents of the <code>sync-adapter</code> with the implementation for the different provider. The core application callback won&rsquo;t have to change if the interface is isolated in this way.</p>

<h2>Multiple Third Parties</h2>

<p>Let&rsquo;s say in the future we have a requirement to support more than one external system. The existing isolation model between the callback and the sync-module still applies. We&rsquo;d just need to inject another adapter in the middle of this flow.</p>

<ol>
<li>Rename <code>sync-adapter</code> to represent the specific external system it relates to: <code>pivotal-adapter</code>.</li>
<li>Implement the appropriate adapter for the new external system: <code>trello-adapter</code></li>
<li>Implement a new <code>sync-adapter</code> that will interface with both of these modules.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">syncEpic</span> <span class="nx">as</span> <span class="nx">syncPivotalEpic</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;pivotal-adapter&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">syncEpic</span> <span class="nx">as</span> <span class="nx">syncTrelloEpic</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;trello-adapter&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">syncEpic</span> <span class="o">=</span> <span class="p">(</span><span class="nx">epic</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">syncData</span> <span class="o">=</span> <span class="nx">epic</span><span class="p">.</span><span class="nx">syncData</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">syncData</span><span class="p">.</span><span class="nx">service</span> <span class="o">==</span> <span class="s1">&#39;pivotal&#39;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">syncPivotalEpic</span><span class="p">(</span><span class="nx">epic</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">syncData</span><span class="p">.</span><span class="nx">service</span> <span class="o">==</span> <span class="s1">&#39;trello&#39;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">syncTrelloEpic</span><span class="p">(</span><span class="nx">epic</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Addition of more third parties can take place in the future without further changes to the core application logic. All the changes are pushed out to the boundaries of the sytems.</p>

<h2>Upgrades and Changes</h2>

<p>If a third party changes their interface, or even their domain model, all changes will be isolated to the integration module alone. Your core application flow should be unaffected by the change, as the interface it interacts with should remain stable.</p>

<p><em>When Pivotal changed their API from v3 to v5, they introduced the concept of the Epic. Previously our application would have had epics internally, but the adapter would have converted epics to labels to support Pivotals model. With changes for their v5 API, Epics become a first class citizen as far as they are concerned and we&rsquo;d update the adapter, but our application core application would not need to change.</em></p>

<h2>Wrap Up</h2>

<p>Isolating third party code via adapters provides benefits in terms of abstracting logic and complexity out of your main application flow. Your application will communicate with the third parties in a consistent manner via the interface, and not be forced to change if a change appears. It ensures that any future conceptual, model, flow/logic and interface changes in the third party only impact the code that deals with that third party. It gives you the ability to swap out your external dependencies with little to no impact on your core applications, as well inject new functionality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function Arguments]]></title>
    <link href="https://hamishrickerby.com/2016/07/20/function-arguments/"/>
    <updated>2016-07-20T09:41:05+10:00</updated>
    <id>https://hamishrickerby.com/2016/07/20/function-arguments</id>
    <content type="html"><![CDATA[<p>In <a href="https://www.bookdepository.com/Clean-Code-Robert-C-Martin/9780132350884?a_aid=rickerbh">Clean Code</a> it&rsquo;s advocated that the ideal number of arguments for a function is 0. Then, 1, 2, and in very rare cases 3. No functions should take more than 3 arguments.</p>

<p>In general, I agree with this. Fewer function arguments = fewer separate parts to understand and should aid with readability (and understanding). There are a couple of complexities though that I&rsquo;d like to run through here. One is levels of abstraction, and the other is testing.</p>

<h2>Abstraction</h2>

<p>When a function has 0 arguments, it can only do 3 things:</p>

<ol>
<li>It can call other functions</li>
<li>It can access data (object state) from itself and return it.</li>
<li><em>Nothing</em> - if it doesn&rsquo;t call other functions, or query object state, then why bother calling it?</li>
</ol>


<p>A <em>useful</em> niladic function is effectively a wrapper for other code, providing a higher level of abstraction.  For example, if we wanted to get a set of data from a report, in a particular format, we could call functions as below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">extract_report_variables_as_json</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># vs</span>
</span><span class='line'>
</span><span class='line'><span class="n">extract_report_variables_from</span><span class="p">(</span><span class="n">a_report</span><span class="p">,</span> <span class="n">FORMAT_JSON</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The niladic (0 argument) version reads nicely, and seems simple to understand on the surface. It also provides a higher level of abstraction than the function where you have to provide the report to extract the data from, and the format to return the data in. This (in my mind) is a double-edged sword. The <code>extractReportVariablesAsJson()</code> function completely hides where it gets data from, and how the formatting request is passed in (and potentially what other formatting options there might be).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">extract_report_variables_as_json</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">extract_report_variables_from</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">report</span><span class="p">,</span> <span class="n">FORMAT_JSON</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s also unclear if there are side effects from this. To figure this out, you need to delve down into the functions to bottom out what they&rsquo;re all doing. For example, to generate the JSON format extract, it may write the data to disk, and this may cause exceptions due to disk space, or permissions problems. You could receive a seemingly unrelated error to the task you&rsquo;re trying to perform due to side effects happening inside an abstracted function.</p>

<p>In the OO world, the general takeaway is that this is a perfect situation. The object provides abstract functions, and they hide the complextity of what is happening under the covers. The main issue I have with niladic functions is the tying of the function to particular state in the object, eg, in our example above the report used will always be <code>self.report</code>. To avoid this, the developer has to repeat the abstraction to generalise the functions, all the way down. The developer also has to consider what abstract, and what more detailed (generalised) functions their object might like to expose, and set appropriate access controls on these functions. For this to happen in reality requires a diligence and dedication on the side of the developer to their craft. They must continually strive for clean code - to wrap and abstract out functions. This is a good thing, but not something that&rsquo;s always done by default.</p>

<h2>Testing</h2>

<p>Testing functions has (I believe) an interesting effort curve, depending on the number of arguments in the function, as well some more fundamental constructs of the language you&rsquo;re developing in.</p>

<h3>Niladic Functions</h3>

<p>With niladic functions, you may have to perform more test setup <em>around</em> the function to be able to test it effectively. When a function takes no arguments, you have to setup the data elsewhere for it to operate on. If your function operates on the data it&rsquo;s passed, then you only need to deal with that function to test it. I consider (in general) the test creation effort for niladic functions to be greater than for functions that take arguments.</p>

<h3>Functions with 1+ arguments</h3>

<p>I believe the easiest function to test is one with one argument. You can pass in the data you want the function to operate on, receive the result, and check it. This is also true for functions with more than one argument, but the problem with these is that the permutations of possible arguments explode. If you&rsquo;re looking to exhaustively test out a function, then you need to multiply the possible values for each argument together. Lets say you have a function that takes a single boolean. This has 2 possible values you can pass in to it, so it is relatively simple to test exhaustively. If you have a function that takes 3 boolean arguments, then you have 8 possible permutations of the arguments (2 x 2 x 2). Things get crazy when we start looking an other data types such as String or Int. <em>How many different values can you have for a String?</em></p>

<h3>Typed Arguments</h3>

<p>One other issue for consideration is if the language you&rsquo;re using supports typed arguments. If it can, a function can define (and ideally enforce) the type of data it can accept. In languages that don&rsquo;t support this, your function could receive data of a different type to what it was expecting.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">format</span> <span class="o">=</span> <span class="s">&quot;My Custom Format&quot;</span>
</span><span class='line'><span class="n">report_data</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'><span class="n">extract_report_variables_from</span><span class="p">(</span><span class="n">report_data</span><span class="p">,</span> <span class="n">format</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To generate tests to exhaustively test this is virtually impossible. You won&rsquo;t practically be able to create all the different permutations of options available.</p>

<h3>How to solve?</h3>

<p>I think there is a way to get a level of confidence in your functions that receive arguments via testing. Unit tests can provide expected, common scenarios that you want to test for to make sure that the function is behaving under normal scenarios. This should always be done.</p>

<p>If your function can support it (and your language has appropriate libraries), <a href="http://blog.jessitron.com/2013/04/property-based-testing-what-is-it.html">Property Based Testing</a> can provide a level of confidence that your function can handle all other scenarios. I&rsquo;m not going to go into it in depth here, but in general, you construct test specifications that will randomly generate test data and pass it to your function. They will repeat this over and over again a number of times, and determine if your function operates as expected in a wider number of scenarios that is humanly possible to code manually. This should give confidence that your function works correctly, even in the face of misuse.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Small Functional Refactoring of Javascript]]></title>
    <link href="https://hamishrickerby.com/2016/07/05/a-small-functional-refactoring-of-some-javascript/"/>
    <updated>2016-07-05T16:26:31+10:00</updated>
    <id>https://hamishrickerby.com/2016/07/05/a-small-functional-refactoring-of-some-javascript</id>
    <content type="html"><![CDATA[<p>I&rsquo;m working on a web based productivity application at the moment, and have been modifying some old code. This code deals with synchronisation of data with external services, and storage of metadata about the synchronisation of that data. The application had quite a bit of duplication in dealing with this metadata; specifically in extracting data from the stored structures. In the interests of having very DRY Javascript, it was time to refactor.</p>

<p>The configuration/metadata structures typically look like</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  ...
</span><span class='line'>  config: [{ key: 'attribute-name', value: { value: 'attribute-value' }}],
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><em>Sidenote: value is embedded in value because the top-level value item actually receives an object to store, so other fields can be added in the future</em></p>

<p>The metadata object was then optionally attached to other user-entered data entities, and queried when updates that require synchronisation to be triggered.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const containerObject = {...
</span><span class='line'>  config: [
</span><span class='line'>      { key: 'itemId', value: { value: 12345 }}, 
</span><span class='line'>      { key: 'itemState', value: { value: 'active' }}
</span><span class='line'>    ],
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>The application was already using <a href="http://ramdajs.com/">RamdaJS</a> to extract data from these types of structures.  To query, there was a whole bunch of duplicated code that traversed the containing objects, and extracted data. Example below.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Extract config object, maybe.
</span><span class='line'>const syncData = R.propOr({}, 'config')(containerObject);
</span><span class='line'>// Find a structure with a specific key value
</span><span class='line'>const itemSyncData = R.find(R.propEq('key', 'itemId'), syncData) || {};
</span><span class='line'>// Extract the value from the entity with that key
</span><span class='line'>const itemId = R.path(['value', 'value'], itemSyncData);</span></code></pre></td></tr></table></div></figure>


<p>To DRY all this up, I looked at the possibility of using <a href="https://en.wikipedia.org/wiki/Currying">Currying</a> and <a href="https://en.wikipedia.org/wiki/Partial_application">Partial Application</a> to help me define generic extraction functions, and reuse them.</p>

<p>First of all, I turned the above into a composed function, with the results of one step flowing as the inputs to the next.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// compose reads from the bottom up, like you're feeding in the object from
</span><span class='line'>// the end and it's consuming it, right to left.
</span><span class='line'>const composedFunction = R.compose(
</span><span class='line'>  R.path(['value', 'value'],
</span><span class='line'>  R.find(R.propEq('key', 'itemId')),
</span><span class='line'>  R.propOr({}, 'config')
</span><span class='line'>); 
</span><span class='line'>
</span><span class='line'>// How to use?
</span><span class='line'>const itemId = composedFunction(containerObject);</span></code></pre></td></tr></table></div></figure>


<p>However, this only supports <code>config</code> objects in the container, and <code>itemId</code>&rsquo;s inside that. We can make this more generic.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const composedGenericFunction = (data, key) =&gt; R.compose(
</span><span class='line'>  R.path(['value', 'value'],
</span><span class='line'>  R.find(R.propEq('key', key)),
</span><span class='line'>  R.propOr({}, data)
</span><span class='line'>); 
</span><span class='line'>
</span><span class='line'>// How to use?
</span><span class='line'>const itemId = composedGenericFunction('config', 'itemId')(containerObject);
</span><span class='line'>const itemState = composedGenericFunction('config', 'itemState')(containerObject);</span></code></pre></td></tr></table></div></figure>


<p>Better because we get more reuse, but we still are repeating ourselves with the definition of the attribute that houses the config. So, lets make our function even more reusable with currying and partial application.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const composedGenericCurriedFunction = R.curry((data, key) =&gt; R.compose(
</span><span class='line'>  R.path(['value', 'value'],
</span><span class='line'>  R.find(R.propEq('key', key)),
</span><span class='line'>  R.propOr({}, data)
</span><span class='line'>)); 
</span><span class='line'>
</span><span class='line'>// How to use?
</span><span class='line'>const configGetter = composedGenericCurriedFunction('config'); // Partial Application
</span><span class='line'>const itemId = configGetter('itemId')(containerObject);
</span><span class='line'>const itemState = configGetter('itemState')(containerObject);</span></code></pre></td></tr></table></div></figure>


<p>We can take this a step further with something like below, and generate a getter that will retrieve the itemId from different containerObjects.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const idGetter = configGetter('itemId');
</span><span class='line'>const idOne = idGetter(containerObject);
</span><span class='line'>const idTwo = idGetter(containerObjectTwo);</span></code></pre></td></tr></table></div></figure>


<p>We can also extract fields from other objects that conform to the same structure, but aren&rsquo;t under a <code>config</code> key.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const syncDataGetter = composedGenericCurriedFunction('syncData');</span></code></pre></td></tr></table></div></figure>


<p>So, with the use of currying and partial application with Ramda, we can create generic, reusable functions that are then used to generate other functions that we can use in our application. Super easy and effective way to DRY out your javascript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor, Heroku, and Bcrypt]]></title>
    <link href="https://hamishrickerby.com/2016/06/29/meteor-heroku-and-bcrypt/"/>
    <updated>2016-06-29T11:07:11+10:00</updated>
    <id>https://hamishrickerby.com/2016/06/29/meteor-heroku-and-bcrypt</id>
    <content type="html"><![CDATA[<p>Just had a very frustrating day. Was getting a deployment error on Heroku with a Meteor app I&rsquo;m making.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Starting process with command `node build/bundle/main.js`
</span><span class='line'>/app/build/bundle/programs/server/boot.js:324
</span><span class='line'>}).run();
</span><span class='line'>   ^
</span><span class='line'>Error: Module did not self-register.
</span><span class='line'>    at Module.require (module.js:365:17)
</span><span class='line'>    at Module._compile (module.js:460:26)
</span><span class='line'>    at Module.load (module.js:355:32)
</span><span class='line'>    at Object.&lt;anonymous&gt; (/app/build/bundle/programs/server/npm/node_modules/meteor/npm-bcrypt/node_modules/bcrypt/bcrypt.js:3:35)
</span><span class='line'>    at Error (native)
</span><span class='line'>    at require (module.js:384:17)
</span><span class='line'>    at Function.Module._load (module.js:310:12)
</span><span class='line'>    at Object.Module._extensions..js (module.js:478:10)
</span><span class='line'>    at bindings (/app/build/bundle/programs/server/npm/node_modules/meteor/npm-bcrypt/node_modules/bcrypt/node_modules/bindings/bindings.js:74:15)
</span><span class='line'>    at Module.load (module.js:355:32)
</span><span class='line'>Process exited with status 1
</span><span class='line'>State changed from starting to crashed</span></code></pre></td></tr></table></div></figure>


<p>I was using the build pack at <a href="https://github.com/srbartlett/heroku-buildpack-meteor">https://github.com/srbartlett/heroku-buildpack-meteor</a> due to its support for Meteor 1.3.</p>

<p>The issue seems to be that the <code>npm-bcrypt</code> atmosphere package doesn&rsquo;t force a recompliation of the npm <code>bcrypt</code> package via <code>node-gyp</code> (I could be wrong here, but that&rsquo;s what it seems like). It seems that the atmosphere package includes the wrong (or a fixed?) architecture, where as what we actually need is to recompile for the current target. To fix this, I&rsquo;ve altered the buildpack to remove the bundled <code>bcrypt</code> package, reinstall from source, and copy back to the bundled location. The reinstall from source seems to force <code>node-gyp</code> to compile for the correct architecture.</p>

<p>My altered buildpack is available at <a href="https://github.com/rickerbh/heroku-buildpack-meteor">https://github.com/rickerbh/heroku-buildpack-meteor</a> if anyone wants it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Back to Basics - Editors]]></title>
    <link href="https://hamishrickerby.com/2016/06/27/back-to-basics-editors/"/>
    <updated>2016-06-27T20:54:48+10:00</updated>
    <id>https://hamishrickerby.com/2016/06/27/back-to-basics-editors</id>
    <content type="html"><![CDATA[<p>My boss bought me a copy of the seminal classic <a href="http://www.bookdepository.com/Pragmatic-Programmer-Andrew-Hunt/9780201616224?a_aid=rickerbh">The Pragmatic Programmer</a>. It&rsquo;s full of sensible advice for both beginners and experienced software professionals.</p>

<p>I have lots of thoughts about the contents of this book but what I&rsquo;d like to cover is usage of text editors, and specifically becoming proficient with a editor that&rsquo;s typically universally available. I can think of 3 of these for UNIX systems. <code>vi</code>, <code>emacs</code>, and <code>nano</code>.</p>

<p>When I was at university I used emacs for all CS course text editing. In my first job, the UNIX servers we had didn&rsquo;t have emacs installed. I wanted to install emacs, but the application vendor didn&rsquo;t allow us to, as they had a support contract and hadn&rsquo;t tested their application with emacs on the box, so no-dice. vi was it for a few years. Then, I just a stopped using these types of editors for about 11 years. The advent of IDEs (Eclipse, Xcode) meant I didn&rsquo;t have to use these &ldquo;basic&rdquo; editors about had a lot of point-and-click, plugins, refactoring etc functionality available.</p>

<p>Until now.</p>

<p>The Pragmatic Programmer has convinced me to relearn basic (and powerful) UNIX tools, and I&rsquo;m starting with emacs. In my job (at the moment) I typically do about 50-80% dev, the rest other stuff (sales, management, architecture, analysis). So I spend a fair amount of time in development environments. I&rsquo;m not a big shortcut key user, and this needs to change - it&rsquo;s just wasting time moving that mouse around to get to menu items and select text.</p>

<p>So far, I&rsquo;ve started with base emacs installations, Haskell packages, git packages, Clojure packages, some convenience packages, and I&rsquo;m about to start with some JavaScript packages. Also getting used to the keystrokes again is a bit tricky, but I&rsquo;m getting there. To help out, I&rsquo;ve moved other IDEs I use (like WebStorm) to use emacs bindings as well.</p>

<p>I&rsquo;m enjoying the ability to use the same environment for text + 3 languages + code control. Super powerful.</p>

<p>If you&rsquo;re interested in my setup, I have an emacs file in my <a href="https://github.com/rickerbh/dotfiles">dotfiles git repo</a>. Check it out (ho ho ho).</p>

<p>If you have any tips for emacs please let me know in the comments or on Twitter - <a href="http://twitter.com/rickerbh">@rickerbh</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading Not Reading]]></title>
    <link href="https://hamishrickerby.com/2016/06/23/reading-not-reading/"/>
    <updated>2016-06-23T09:14:11+10:00</updated>
    <id>https://hamishrickerby.com/2016/06/23/reading-not-reading</id>
    <content type="html"><![CDATA[<p>I recently finished a book called <a href="http://www.bookdepository.com/Apprenticeship-Patterns/9780596518387?a_aid=rickerbh">Apprenticeship Patterns</a> (more on why later) and one of the things it suggested is keeping an online list of books you read, and books you want to read. So here is mine.</p>

<p><a href="http://hamishrickerby.com/books/">http://hamishrickerby.com/books/</a></p>

<p>I&rsquo;m going to add a few more books to the read list as well - ones I think other people may be interested in.</p>

<p>If you&rsquo;ve got any recommendations please let me know in the comments or on Twitter - <a href="http://twitter.com/rickerbh">@rickerbh</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brief Update]]></title>
    <link href="https://hamishrickerby.com/2016/05/17/brief-update/"/>
    <updated>2016-05-17T21:52:33+10:00</updated>
    <id>https://hamishrickerby.com/2016/05/17/brief-update</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been ages.</p>

<ul>
<li>Completed that 1000km run goal</li>
<li>Sold a house</li>
<li>Wife got a new job</li>
<li>Sold another house</li>
<li>Moved to Sydney</li>
<li>Getting there with Haskell (thanks to <a href="http://haskellbook.com">Haskell Programming from First Principles</a> - buy it - it&rsquo;s great)</li>
<li>Bought a house</li>
<li>Feeling in a really good place professionally</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I've Taken a Full Time Job]]></title>
    <link href="https://hamishrickerby.com/2014/09/27/why-ive-taken-a-full-time-job/"/>
    <updated>2014-09-27T10:08:51+10:00</updated>
    <id>https://hamishrickerby.com/2014/09/27/why-ive-taken-a-full-time-job</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve relapsed. I swore I&rsquo;d never do it again, but I have. I&rsquo;ve accepted a full time job.</p>

<h2>I&rsquo;m not in it for the money</h2>

<p>I&rsquo;ve been running happtic for just over 2 years now, and it&rsquo;s been quite lucrative. I&rsquo;ve managed to get a small, but reliable base of repeat/ongoing direct clients, and developed some applications that have done very well. I&rsquo;ve only taken on 2 non-direct contracts in that period, so am happy with how that&rsquo;s worked out. Overall, I&rsquo;d say the business has been successful in terms of providing my family with a relatively good income. Sure, having a stable income, holidays, superannuation etc will be great, but that&rsquo;s not why I&rsquo;ve taken the job.</p>

<h2>It&rsquo;s a growth and opportunity thing</h2>

<p>The main issue I&rsquo;ve been struggling with in running happtic is growth. I wanted to turn happtic into a larger business, providing technical consulting and development service with a team of 10 or so. I haven&rsquo;t been able to get enough volume of projects/clients to warrant taking on any extra staff (apart from that time I hired a graduate/entry level developer, and he called in sick on his first day and never got in touch with me again).</p>

<p>I&rsquo;ve learnt that there are things I&rsquo;m good at, and things I&rsquo;m not good at. I&rsquo;m great at systems architecture, technical strategy, software design, and development. What I&rsquo;m not good at is cold business development. Once someone is at the door, the conversion rate is high, but getting them to the door is hard for me to orchestrate.</p>

<p>Joining a larger organisation, with a pre-existing client base and sales team helps me meet my goals of leading a technology team, in a position of influence in an organisation. One key thing that I remember from a corporate management training course many years ago is that in companies (<em>and in real life</em>), the path to achieving a desired outcome may not be the path you expect. If you can recognize that the outcome is what you are after, there are many paths that can take you there, so you shouldn&rsquo;t be precious about how you get the outcome, as long as you get that outcome. The outcome I&rsquo;m after is to lead a technology focussed team of people, providing development, consulting, and technical strategy services, and that&rsquo;s what this job is.</p>

<h2>What&rsquo;s the new job?</h2>

<p>I&rsquo;ll be working as &ldquo;Director of Mobile&rdquo; for <a href="http://simplemachines.com.au">Simple Machines</a>. The job will involve setting up and leading a mobile development team, as well as an office, here in Melbourne.</p>

<p>One particularly exciting thing about the job is the split between client and product work. Simple Machines have clients, as well as their (our!) own products and investments in startups, so there will be varied work which is great. I find working on a single product can feel a bit stale after a while, so having a mix of client and product work will definitely help with that, but also provide the satisifaction you get from growing and evolving a system over time.</p>

<p>If you&rsquo;re looking for any mobile app development (iOS, Android, WP, any platform) or development of complex, high performance, scalable applications, get in touch <a href="mailto:hamish@simplemachines.com.au">hamish@simplemachines.com.au</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1000km - February]]></title>
    <link href="https://hamishrickerby.com/2014/03/02/1000km-february/"/>
    <updated>2014-03-02T14:43:25+11:00</updated>
    <id>https://hamishrickerby.com/2014/03/02/1000km-february</id>
    <content type="html"><![CDATA[<p>Progress has been a bit slower this month. Short month, very hot here, and new baby all contributed to slowing progress down. Oh, in other news, we now have a baby!  Exciting.</p>

<p>190km complete at end of Feb, which leaves me with a 30km buffer. The last graph was a little incorrect too - Numbers only puts dates correctly (in relative terms) on the x-axis if the graph type is a scatterplot. Dumb. The new graph below is correct.</p>

<p><img src="https://hamishrickerby.com/images/1000km-Feb.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1000km - January]]></title>
    <link href="https://hamishrickerby.com/2014/01/31/1000km-january/"/>
    <updated>2014-01-31T10:17:23+11:00</updated>
    <id>https://hamishrickerby.com/2014/01/31/1000km-january</id>
    <content type="html"><![CDATA[<p>Progress on the 1000km is good so far. 109km run in Jan, and I&rsquo;m sticking to the 10km distance per run. Weight is also starting to fall, which is great because I&rsquo;m about 9kg heavier than I should be.</p>

<p>Because I&rsquo;m also a nerd (and if you&rsquo;re reading my blog, you probably are too), here&rsquo;s a graph marking progress. Grey line is what I need to run to get to 1000km this year. Any blue higher than the grey line is kms in the bank for a rainy day.</p>

<p><img src="https://hamishrickerby.com/images/1000km-Jan.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor]]></title>
    <link href="https://hamishrickerby.com/2014/01/23/meteor/"/>
    <updated>2014-01-23T20:25:22+11:00</updated>
    <id>https://hamishrickerby.com/2014/01/23/meteor</id>
    <content type="html"><![CDATA[<p>A couple of days ago I received an email from meetup.com about meetups that I might be interested in. Usually this is full of crap I don&rsquo;t care about, like mothers groups or salsa dancing, but this most recent mail featured an intriguing group called &ldquo;Meteor Melbourne - a better way to build apps&rdquo;. So, I looked into it.</p>

<p><a href="http://meteor.com">Meteor</a> is a framework based on node.js that allows you to write responsive, reactive, real-time web applications in javascript on both the client and server side. I&rsquo;ve always considered javascript as a toy language - I think this opinion comes from my first interaction with JavaScript waaaaaay back in the late 90&rsquo;s (I think it was somewhere between &lsquo;96 and &#8216;98), when all it was really used for was alert boxes and tic-tac-toe implementations. However, I&rsquo;ve recently been doing a lot of work for clients with <a href="http://parse.com">Parse</a> and their &ldquo;cloud code&rdquo; functionality, taking some logic out of mobile apps and running it on the Parse servers - and you use JavaScript to do this. They promoted use of <a href="https://www.parse.com/docs/js_guide#promises">Promises</a>, and I&rsquo;ve been doing a lot with <a href="https://github.com/ReactiveCocoa/ReactiveCocoa">RAC</a> in iPhone apps, so this functional style is something I&rsquo;m familiar with and like. I also have a friend who is helping a mate out on a startup, who is looking at some serious &ldquo;enterprise&rdquo; functionality implemented with server-side javascript, so I thought it was maybe time to seriously look at this thing too, and I checked it out.</p>

<p>Amazeballs. Meteor is <em>MAGIC</em>. Don&rsquo;t believe me? Watch this <a href="https://www.meteor.com/screencast">screencast</a>.</p>

<p>I think the magic for me comes from the real-time (well, super fast at least -> sub second synchronization) nature of the system, and the automate shuffling of data between the server and client to synchronize/update pages with no specific actions on the developers part. The built in support for packages is also really tidy, although having to use a 3rd party packages system (<a href="http://oortcloud.github.io/meteorite/">Meteorite</a> and <a href="https://atmosphere.meteor.com">Atmosphere</a>) for more modern versions of some of the core packages (eg, bootstrap-3 vs bootstrap-2) seems a little undesirable.</p>

<p>It&rsquo;s super fast to get set up (1 line install, 1 line to start), and this includes server, database, sync between client and server. Want user authentication? Two more command line hits (1 for a UI, 1 for a login provider package), and 1 line to get the UI template built in. Amazingly productive.</p>

<p>Where I see huge potential for Meteor is in the mobile space. Having a web app, which automatically pushes changes to a mobile device is super powerful. With the current state of mobile apps you typically need to poll for changes to data, unless you build your own data sync solution or rely on something like iCloud to push changes around for you (haha, yeah right). When I&rsquo;ve done this sort of thing in the past with Parse, I&rsquo;ve actually gone as far as abusing the Apple Push Notification Service to actually trigger a mobile device to re-query a web service to retrieve new data as APNS is the only push mechanism available. Having a service that reliably notifies a client when data changes server side, with sub-second speed, solves a whole bunch of problems for app developers.</p>

<p>This is the tech stack that I&rsquo;m now looking at using for my small business productivity tool, and I&rsquo;m hoping that mobile sync works just as well (and fast) as the client-server sync does. Next up is a small proof of concept to test this out.</p>

<p>I haven&rsquo;t been this excited about web development since I saw DHH&rsquo;s web app in 15 mins rails screencast in 2006.</p>

<p><em>Oh yeah, I went to the meetup too. Nice job meetup.com</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014]]></title>
    <link href="https://hamishrickerby.com/2014/01/20/2014/"/>
    <updated>2014-01-20T11:14:43+11:00</updated>
    <id>https://hamishrickerby.com/2014/01/20/2014</id>
    <content type="html"><![CDATA[<p>I&rsquo;m not one for new years resolutions, but there are a couple of things I&rsquo;d like to achieve this year.</p>

<ol>
<li>Run 1000km</li>
<li>Design, Develop, and Release a productivity tool for small and medium businesses</li>
</ol>


<p>1000km is something I attempted to achieve last year, but by the time February rolled around, it was obvious that that just was not going to happen. This year is going much better. I&rsquo;ve established a running routine already, and have (as of today) extended my run distance to about 10km. I&rsquo;m sure this will be much tougher when winter rolls around, but I&rsquo;m up for the challenge.</p>

<p>The SME productivity tool is something I&rsquo;ve been toying with the idea of for a while. The idea actually came from my sister and her husband (they run a construction company), and it solves a problem that they spend a few hours a week on. I&rsquo;ve already got my minimum functionality defined, and business model. It works well as a SaaS/subscription style product so fits with the revenue stream style I like. I&rsquo;ll hopefully have a splash/info/signup page soon. I&rsquo;m also looking at a new (new for me) technology stack to power this thing, so I&rsquo;ve also got a lot of learning to be able to create it. Fingers crossed it gets off the ground.</p>

<p>I guess there&rsquo;s a third thing, but it&rsquo;s more of an inevitability, rather than a goal as such. We&rsquo;ll be having a baby soon (hopefully in 3 weeks), so life will be getting much more time-scarce. We&rsquo;ll see how all this holds up under parenthood.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Medical Regulation and Apps]]></title>
    <link href="https://hamishrickerby.com/2013/03/22/medical-regulation-and-apps/"/>
    <updated>2013-03-22T10:23:00+11:00</updated>
    <id>https://hamishrickerby.com/2013/03/22/medical-regulation-and-apps</id>
    <content type="html"><![CDATA[<p>Yesterday I read an <a href="http://venturebeat.com/2013/03/19/health-app-makers-to-feds-dithering-on-regulation-is-stifling-innovation/">article in Venture Beat</a> covering part of a series of hearings US Congress is holding on regulation of health and medical apps on smartphone and tablet devices. My <em>significantly</em> paraphrased version of the article is that the FDA are unsure if and how health apps should be regulated, and that representatives from the &ldquo;app&rdquo; industry are pushing for no regulation for consumer facing apps.</p>

<p>I have a slightly different take on this. To me, the question is simple (and what is driving health authorities globally to address this issue): can health apps be considered to be medical devices?</p>

<p>Medical devices are subject to legislation worldwide.  In fact, often requiring prior market approval through mechanisms similar to which pharmaceutical companies must obtain approval for medicines. Clear guidance exists on the regulation which surrounds medical devices, and this includes the legislative definition of what constitutes a medical device.  As a snapshot (and these definitions can be considered consistent with legislation in many other countries too), the definition of a medical device in Australia, the EU, and US clearly includes apps which diagnose, prevent, monitor, treat, alleviate disease.</p>

<figure class='code'><figcaption><span>Australian Therapeutic Goods Act 1989</span><a href='http://www.comlaw.gov.au/Series/C2004A03952'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>41BD A medical device is:
</span><span class='line'>  a. any instrument, apparatus, appliance, material or other article (whether used alone or in combination, and including the software necessary for its proper application) intended, by the person under whose name it is or is to be supplied, to be used for human beings for the purpose of one or more of the following:
</span><span class='line'>    i. diagnosis, prevention, monitoring, treatment or alleviation of disease;
</span><span class='line'>    ii. diagnosis, monitoring, treatment, alleviation of or compensation for an injury or handicap;
</span><span class='line'>    iii. investigation, replacement or modification of the anatomy or of a physiological process;
</span><span class='line'>    iv. control of conception;
</span><span class='line'>  and that does not achieve its principal intended action in or on the human body by pharmacological, immunological or metabolic means, but that may be assisted in its function by such means; or
</span><span class='line'>  b. an accessory to such an instrument, apparatus, appliance, material or other article.</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>EU Directive 2007/47/ec (paraphrased) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Any instrument, apparatus, appliance, software, material or other article that is used alone or in combination, including software specifically for diagnostic or therapeutic purposes, that the manufacturer intends for use in human beings. Such devices are used for:
</span><span class='line'> - Diagnosis, prevention, monitoring, treatment, or alleviation of disease
</span><span class='line'> - Diagnosis, monitoring, treatment, alleviation of, or compensation for an injury or handicap
</span><span class='line'> - Investigation, replacement, or modification of the anatomy or of a physiological process
</span><span class='line'> - Control of conception</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>US Food, Drug and Cosmetic Act Section 201(h) </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Medical machine, contrivance, implant, in vitro reagent, or other similar or related article, including a component part, or accessory that is:
</span><span class='line'> - Recognized in the official National Formulary, or the United States Pharmacopoeia, or any supplement to them
</span><span class='line'> - Intended for use in the diagnosis of disease or other conditions, or in the cure, mitigation, treatment or prevention of disease, in man or other animals
</span><span class='line'> - Intended to affect the structure or any function of the body of man or other animals, and does not achieve any of its primary intended purposes through chemical action within or on the body of man or other animals and does not depend on metabolic action to achieve its primary intended purposes.</span></code></pre></td></tr></table></div></figure>


<p>The key, and common, part to all of these is the use of the device in <em>diagnosis, monitoring, and treatment of a disease</em>.</p>

<p>Regardless of the user of the device, regulation exists. Medical devices such as syringes, contact lenses, condoms, and bandages are all available to the public, and regulated (at least in Australia). If the same rule that is being proposed for apps was applied for these devices, anyone could make devices such as bandages, and the public would have no guarantee as to the quality, safety, and efficacy of these devices.</p>

<p>Devices and medicines are regulated to protect patients (and the general public) from faulty or harmful devices and drugs, and misdiagnosis or mistreatment from inaccurate information being provided to medical professionals who need to make decisions on the basis of that information. The consequences for patients from medical misdiagnosis from a medical app can be a lot more severe than (lets say) the physics calculations not accurately representing gravity in Angry Birds. Death or permanent disability is a real possibility with inaccurate (or just plain wrong) information being captured by medical apps and used for diagnosis.</p>

<p>Getting a medical device approved can be a very costly exercise. Typically, trials with verifiable data are required to show accuracy and stability in the product. There is also the paperwork required to submit the device to the health regulator in a country, and this submission process needs to be repeated for each health regulator in each country you want to sell your device in.<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup> However, due to the high cost (and high barrier to entry<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup> in the marketplace), if you can jump through the regulatory hurdles, you may find a relatively competition-free market. That&rsquo;s the reward for navigating the processes.</p>

<p>There is also a comment in that article that &ldquo;Developers are mystified by the rules in this highly regulated industry&rdquo;. If this is the case, maybe developers need to do the same as other players in the health industry and either employ, or contract in, medical regulatory professionals. Mystification is no excuse for not playing by the rules.</p>

<p><em>Ignorantia juris non excusat</em>.</p>

<h2>Need help?</h2>

<p><a href="http://happtic.com">happtic</a> (my company) provides consulting services related to health regulations for medical apps. If you&rsquo;re looking for help determining if an app would be considered a medical device, help with understanding regulatory processes, or help with regulatory submissions please <a href="mailto:contact@happtic.com">get in touch</a>.</p>

<div class="footnotes">
    <ol>
        <li id='fn:1'><p> Unless you&#8217;re in the EU. There is a single health agency for Europe.
  <a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p> Regulatory requirements are only one significant barrier to entry in certain industries. Other industries (such as telecommunications and energy suppliers) also have a large infrastructure requirement requiring both capital investment and significant time. Medical Apps don&#8217;t typically have this barrier.
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li>
    </ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRYing Out Objective-C - Identification]]></title>
    <link href="https://hamishrickerby.com/2013/02/23/drying-out-objective-c-identification/"/>
    <updated>2013-02-23T12:09:00+11:00</updated>
    <id>https://hamishrickerby.com/2013/02/23/drying-out-objective-c-identification</id>
    <content type="html"><![CDATA[<p>I have a large objective-c codebase I&rsquo;ve been working on with a client for over a year now. The application started off as a prototype, and transitioned into a demo client, and is currently undergoing modifications for security/penetration testing and commercialization. Initially for the protoype and demo, the objective was to get a working application as quickly as possible - speed of initial development was the key. With the current change in focus to a more productized codebase, and improving maintainability as part of that, I decided I&rsquo;d actively go hunting for areas in the application that can be tidied up, and particularly, looking for duplicate segments of code and eliminating them where feasible.</p>

<p><a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY - or Don&rsquo;t Repeat Yourself</a> - is (according to Wikipedia) a <em>principle is stated as &ldquo;Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.&rdquo;</em> &hellip; <em>When the DRY principle is applied successfully, a modification of any single element of a system does not require a change in other logically unrelated elements. Additionally, elements that are logically related all change predictably and uniformly, and are thus kept in sync.</em></p>

<p>One big problem with a larger code base that has been developed over a long period of time is that you may not know where the duplicate code actually is. You know it&rsquo;s there, you&rsquo;re just not sure where.</p>

<h2>Finding Duplicate Code</h2>

<p>What I wanted for DRYing up the code base was for duplicate chunks of code to be identified for me.</p>

<p>Searching out there I stumbled across a project called <a href="http://www.harukizaemon.com/simian/">Simian</a> - it&rsquo;s a java based tool for identifing duplicate code in a set of different programming languages - one being Objective-C. Simian supports output in a number of different formats - plain text being the default, but also supports an XML based output. The project is available on a 15 day evaluation period, and then should be paid for commercial or enterprise use. A Build Server license costs $499 US.</p>

<p>Simian can be run against a codebase just by feeding it include/exclude directory and file patterns.</p>

<pre><code>java -jar simian-2.3.33.jar -excludes=\"External Libraries\" **/*.m **/*.h
</code></pre>

<p>You can also change the format of the output</p>

<pre><code>java -jar simian-2.3.33.jar -formatter=xml -excludes=\"External Libraries\" **/*.m **/*.h
</code></pre>

<p>And even output to a file</p>

<pre><code>java -jar simian-2.3.33.jar -formatter=xml:simian.xml -excludes=\"External Libraries\" **/*.m **/*.h
</code></pre>

<h2>Integration with Jenkins</h2>

<p>I&rsquo;ve previously written here about setting up and using Jenkins as a build/CI system with Objective-C/iOS projects, and I really wanted to integrate this duplicate code reporting as part of my standard build process, along with my unit and application test reports.</p>

<p>To get Simian reports integrated with Jenkins there is a Jenkins extension available called the <a href="https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin">DRY Plugin</a>. Just navigate to your Jenkins instance and click&hellip; Manage Jenkins -> Manage Plugins -> Available and type Duplicate in the filter box. The plugin is called &ldquo;Duplicate Code Scanner Plug-in&rdquo;. Install it.</p>

<p>To get the Simian process running is really simple. I added a new project that I could trigger after my unit tests have run, called &ldquo;Code Analysis&rdquo;. This project has a very small number of steps.</p>

<ol>
<li>Pull the source from your code repo</li>
<li>Set a Build Trigger for the project to start after your unit test project has completed. <em>This step isn&rsquo;t necessary, but you need some sort of build trigger. I like mine to work after unit tests as then I know the codebase is in a good state.</em></li>
<li>Add an Execute Shell task. The task should look something like below</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd "&lt;Path to your Jenkins project>/workspace"
</span><span class='line'>git submodule update --recursive --init
</span><span class='line'>echo "#!/bin/bash" > simian.sh
</span><span class='line'>echo "java -jar &lt;Path to your simiar jar>/simian-2.3.33.jar -balanceSquareBrackets=true -formatter=xml:simian.xml -excludes=\"External Libraries\" **/*.m **/*.h" >> simian.sh
</span><span class='line'>echo "exit 0" >> simian.sh
</span><span class='line'>chmod u+x simian.sh
</span><span class='line'>./simian.sh
</span><span class='line'>rm simian.sh</span></code></pre></td></tr></table></div></figure>


<p>What the above task does is change directory to the correct jenkins workspace, ensure all submodules are updated (if you don&rsquo;t use submodules, you probably won&rsquo;t want this), then create a shell script that runs Simian and exits with a 0 return code, sets the script to be executable, runs the script, then cleans up after itself. The reason why the build task needs to create a shell script to run Simian is because the return code from Java/Simian seems to be interpreted by Jenkins as non-0 i.e. a build failure. You don&rsquo;t want that.</p>

<p>The <code>-balanceSquareBrackets=true</code> flag to Simian ensures that code that is split across multiple lines inside square brackets is treated as a single unit. It might be a good idea to use the <code>-balanceParentheses=true</code> flag as well to help matching on things like <code>if</code> statements.</p>

<p>Then it&rsquo;s just a matter of configuring the reporting. If you&rsquo;ve installed the DRY plugin correctly, you should be able to add a Post Build Action of &ldquo;Publish duplicate code analysis results&rdquo;. In the &ldquo;Duplicate code results&rdquo; field, type in the path and filename you gave the output XML from simian - in the example above I called mine <code>simian.xml</code>.</p>

<p>That&rsquo;s it.</p>

<p>Save and &ldquo;Build Now&rdquo; your new project, and after this is complete, click on the project. There should be a fancy trend graph showing Duplicate Code in the upper right of the screen, and a &ldquo;Duplicate Code&rdquo; item on the left navigation menu. That will show you all the files with duplicate code chunks, and the other files they are repeated in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Value of Contracting]]></title>
    <link href="https://hamishrickerby.com/2012/10/25/the-value-of-contracting/"/>
    <updated>2012-10-25T16:20:00+11:00</updated>
    <id>https://hamishrickerby.com/2012/10/25/the-value-of-contracting</id>
    <content type="html"><![CDATA[<p>Very unexpectedly, for the past few weeks I&rsquo;ve been working with a Digital Agency here in Melbourne on a sports-themed iPhone app for a very large client of theirs (a worldwide media brand). I was called in at the 11th hour to work with two  other developers (both experienced iOS and ruby contractors), and I knew within the first hour there that the project was going to be a significant challenge. The project had unrealistically tight timelines and a lack of testing and testing platforms/data sets available.</p>

<p>Needless to say, it was an interesting experience. In my previous full time jobs I&rsquo;ve never worked as a developer, and with my current company all projects to date have been single developer projects.  But I definitely found the whole experience really rewarding. It reminded me of the time I was a manager in a large digital agency myself, only there it was me cracking the whip to get development in on time, rather than having the whip cracked on me. :-)
(It also meant I had to get dressed and leave the house to work!)</p>

<p>In all seriousness though, the key thing that made the whole thing worthwhile was seeing a &ldquo;production&rdquo; codebase from other experienced mobile app developers. My Objective-C design and style is self-taught. It was great to have what I do and the way I do it validated by others, as well as picking up hints and tips for more modular app implementations. This is something that you really miss out on as an indie developer with a one person development team. The shared learning and ability to bounce ideas off people to come up with great solutions is something that is really missing from the indie way of working.</p>

<p>I&rsquo;ll definitely consider doing more contracting work in the future - both for meeting other developers and for picking up new skills. Highly recommended.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[99 Problems (but Haskell Ain't One)]]></title>
    <link href="https://hamishrickerby.com/2012/07/14/99-problems-but-haskell-aint-one/"/>
    <updated>2012-07-14T16:47:00+10:00</updated>
    <id>https://hamishrickerby.com/2012/07/14/99-problems-but-haskell-aint-one</id>
    <content type="html"><![CDATA[<p>Back in the late 90&rsquo;s I took COSC 122 at the University of Canterbury. We had to learn functional programming as part of that course - HUGS (it&rsquo;s based on Haskell 98). It never really clicked with me - for some reason my brain would just not understand functional programming.</p>

<p><img src="https://hamishrickerby.com/images/tumblr_leretcb0Sa1qfawn6o1_500.jpg"></p>

<p>I&rsquo;ve always regretted that I never &ldquo;got it&rdquo;. It&rsquo;s time to fix that regret.</p>

<p>To (re)learn Haskell, I&rsquo;m using <a href="http://learnyouahaskell.com">Learn You a Haskell for Great Good!</a>, and to ensure that I &ldquo;get it&rdquo;, I&rsquo;m working my way through the <a href="http://www.haskell.org/haskellwiki/99_questions">Haskell 99 Problems</a>.</p>

<p>Follow my progress on Github at <a href="https://github.com/rickerbh/99-Problems">https://github.com/rickerbh/99-Problems</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating a UITableView Without Calling reloadData]]></title>
    <link href="https://hamishrickerby.com/2012/07/06/updating-a-uitableview-without-calling-reloaddata/"/>
    <updated>2012-07-06T11:21:00+10:00</updated>
    <id>https://hamishrickerby.com/2012/07/06/updating-a-uitableview-without-calling-reloaddata</id>
    <content type="html"><![CDATA[<p>For a new app I&rsquo;ve been working on for the past few days I wanted to a nice &ldquo;inline&rdquo; way of gathering data from the user. Typically, if I&rsquo;ve needed to have a user put in more than a single line of text, I would have popped the user to a different screen that has a UITextView as the sole point of focus, get them to type in the data, and then have them navigate back and have the data appear within a tableview.</p>

<p>For this new app, I wanted them to be able to enter large amounts of text inline within a cell of a tableview. This also means that the cell would have to dynamically grow and shrink, as the user is entering the data. The UITextView (where the user is entering the data) would need to resize itself based on the users input, as well as the UITableViewCell that contains the text view, and have the UITableView adjust on the fly to the users input.</p>

<p>What I needed to happen was for the UITableView to go through the process of querying the height of each of the cells via the UITableViewDelegate&rsquo;s tableView:heightForRowAtIndexPath: method, and executing the necessary layout code to push/pull the cells around as an individual cell expands or shrinks. The other complication is that the UITextView that the user is typing in cannot lose focus (i.e., it cannot resignFirstResponder). The obvious way to get the UITableView to perform layout is to call [tableview reloadData], however, this causes the UITextView to lose focus, and the keyboard disappears. This seems to happen when creating the cells via the tableview:cellForRow:atIndexPath: method.</p>

<p>Then I found a sneaky trick.</p>

<p>If you execute the following code the table view will query the height for the individual cells, and lay them out, but not reload the cells, and not cause the UITextView to resignFirstResponder.</p>

<pre><code>[tableview beginUpdates];
[tableview endUpdates];
</code></pre>

<p>So, now I have cells that can grow and shrink dynamically, and not lose focus for the user as they are inputting data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core Data Migrations and Large Data Sets]]></title>
    <link href="https://hamishrickerby.com/2012/06/04/core-data-migrations-and-large-data-sets/"/>
    <updated>2012-06-04T12:14:00+10:00</updated>
    <id>https://hamishrickerby.com/2012/06/04/core-data-migrations-and-large-data-sets</id>
    <content type="html"><![CDATA[<p>I recently updated <a href="http://click.linksynergy.com/fs-bin/stat?id=*W1h7qYtoaI&amp;offerid=146261&amp;type=3&amp;subid=0&amp;tmpid=1826&amp;RD_PARM1=http%253A%252F%252Fitunes.apple.com%252Fus%252Fapp%252Fmoving-van%252Fid357418069%253Fmt%253D8%2526uo%253D4%2526partnerId%253D30">Moving Van</a> (<em>you should buy it now!</em>) and published the new version in the app store late last week. It was a substantial update to the application - it had a completely new UI with custom interface controls, as well as a whole stack of features that customers had been asking for - things like room autocompletion, saving images to camera roll, more export options, moving items between boxes etc.</p>

<p>As part of this update, I also remodelled the Core Data entities that power the application. The initial model that was used was, let&rsquo;s say, a little naïve in terms of the way that the stored data would impact performance of the application. It stored an image on an item as binary data within the Item entity itself, which in retrospect was a terrible idea because of table view performance. The new version split out the image to a separate entity, which means that when the Item entity loads, the image doesn&rsquo;t get loaded unless explicitly needed because of the faulting behaviour of Core Data and entity relationships.</p>

<p>So, to get out of this historic design decision, a data migration was required. The migration itself was relatively simple, with pretty much everything working from a standard mapping model (add two entities, copy existing entities, create relationships with new entities). I had to use a custom migration policy for one aspect of the migration - two image entities are created for each item (for tableview performance reasons). There is the original image, and a thumbnail version of that image. The custom policy needed to take the original image from the source Item, scale the image down, and set it in the new Thumbnail entity, but that itself was relatively simple.</p>

<p>The migration was tested with all possible permutations of the data that a user could create, including a large data set with over 100 boxes and hundreds of items. The migration would take a few seconds to run, and everything was working well. I submitted, and released the new version.</p>

<p>DISASTER.</p>

<p>It appears that my data sets for testing were inadequate. Quite a few users of the application store images for every one of their items. 300, 400 of them. Some users don&rsquo;t even use the text descriptions for items, they just use images. The larger data sets used for testing were text only - none of the testing involved hundreds of items with images. A database with around 500 images is about 300Mb - I think that&rsquo;s quite a large CD store for the iPhone.</p>

<p>What was happening is that Core Data, while doing the migration, was choking trying to load all the Item entities (with images embedded) into memory. The lightweight migration mechanism seems to try to be fast, over being resource efficient. On the iPhone this is a <em>bad thing</em> if you have a large volume of data - your application will be terminated with little to no warning.</p>

<p>Apple have <a href="http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/CoreDataVersioning/Articles/vmCustomizing.html%23//apple_ref/doc/uid/TP40004399-CH8-SW9">specific recommendations</a> for what do with large core data sets - mainly around splitting a lightweight migration into separate mapping models. This approach is fine if you have a large number of entities, but it a <em>useless</em> strategy if you have a large number (or more precisely, a large data volume) of an individual entity. Their &ldquo;chunks&rdquo; of data refer to a per entity chunk - the approach still attempts to load all instances of an entity into memory. What I needed was a way to have multiple &ldquo;chunks&rdquo; of a specific entity, so the whole set was not loaded into memory at once.</p>

<p>The approach I took to solve this problem is very &ldquo;manual&rdquo;. It consists of the following steps:</p>

<ol>
<li>Determine if a migration is required - if so, pop a migration controller that informs the user a migration is taking place, and start the migration.</li>
<li>Create a Core Data stack with the &ldquo;old&rdquo; model, and old version of the store as a source.</li>
<li>Create another Core Data stack with the &ldquo;new&rdquo; model, and a new store as the destination.</li>
<li>Request a set of entities from the old data store, with a small batch size to avoid loading all entities at once.</li>
<li>Traverse the object graph of those old entities, creating each instance of an entity in the new data store.</li>
<li>Save the new store every 10 or so entities - this is to ensure that the NSManagedContext doesn&rsquo;t consume too much memory with unsaved objects hanging around.</li>
<li>After this is all finished, backup the original data store, and move the new one to take its place.</li>
<li>Finally, post a notification for the AppDelegate to receive, that signals the migration is complete and the rest of the startup sequence can continue.</li>
</ol>


<p>The approach works - the application no longer runs out of memory on migration. However, the mapping model is now useless as it&rsquo;s never used, and there are a couple of interesting points. First one is that the migration takes up extra storage space as we are creating an extra store with pretty much the same volume of data in it - just laid out differently. I&rsquo;m not sure if this happens when CD performs a migration - I suspect it is, but what worries me is that if a user is low on space, the migration could cause the disk to fill up. The other thing that I noticed was that the migration is considerably slower that a CD managed lightweight migration. However, it actually works on large data sets, unlike the CD managed lightweight migration, so the positives here outweigh the negatives.</p>

<p>There is probably a way to solve this that utilises more of the Migration classes that Apple provide - specifically subclassing NSMigrationManager - but, I didn&rsquo;t really have enough time available to figure that out - I needed a fix <em>now</em>.</p>

<p>And now some code.</p>

<h2>Determining if your Core Data store needs to be migrated</h2>

<pre><code>// See if a database exists to be migrated
NSString *sourceStorePath = &lt;Your source store path in the file system&gt;
if (![[NSFileManager defaultManager] fileExistsAtPath:sourceStorePath]) {
  // Database doesn't yet exist. No need to test data compatibility"
  return NO;
}

// Create a persistence controller that uses the model you've defined as the "current" model
NSURL *modelURL = [[NSBundle mainBundle] URLForResource:@"&lt;Your models directory name&gt;" withExtension:@"momd"];
NSManagedObjectModel *model = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
NSPersistentStoreCoordinator *psc = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:model];

NSError *error = nil;
NSURL *sourceStoreURL = [NSURL fileURLWithPath:sourceStorePath];
NSDictionary *sourceStoreMetadata = [NSPersistentStoreCoordinator metadataForPersistentStoreOfType:NSSQLiteStoreType
                                                                                               URL:sourceStoreURL
                                                                                             error:&amp;error];
// Do error checking... Removed from the code sample.
NSManagedObjectModel *destinationModel = [psc managedObjectModel];
BOOL pscCompatible = [destinationModel isConfiguration:nil
                           compatibleWithStoreMetadata:sourceStoreMetadata];
// if pscCompatible == YES, then you don't need to do a migration.
</code></pre>

<h2>Loading old and new Core Data Stacks</h2>

<p>You&rsquo;ll need to do this twice - just swap out the model name for old/new models and keep the references to the MOCs that are created. Ensure you have a different store path for your new store!
For the new model, it&rsquo;s a good idea to also test if a file exists at the new model location - it could be indicative of a migration that&rsquo;s previously failed.
    NSURL <em>modelURL = [[NSBundle mainBundle] URLForResource:@&ldquo;<source or destination model name>&rdquo; withExtension:@&ldquo;mom&rdquo; subdirectory:@&ldquo;<Your models directory name>.momd&rdquo;];
    NSManagedObjectModel </em>model = [[NSManagedObjectModel alloc] initWithContentsOfURL:modelURL];
    NSPersistentStoreCoordinator *psc = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:model];</p>

<pre><code>// Get the store url
NSString *sourceStorePath = &lt;Your source/destination store path in the file system&gt;
NSURL *sourceStoreURL = [NSURL fileURLWithPath:sourceStorePath];

// Use this for source store - ensures you don't accidentally write to the entities
NSDictionary *options = [NSDictionary dictionaryWithObject:[NSNumber numberWithBool:1]
                                                    forKey:NSReadOnlyPersistentStoreOption];

// Use this for destination store - makes it writeable
NSDictionary *options = [NSDictionary dictionaryWithObject:[NSNumber numberWithBool:0]
                                                    forKey:NSReadOnlyPersistentStoreOption];
NSError *error = nil;
[psc addPersistentStoreWithType:NSSQLiteStoreType
                  configuration:nil
                            URL:sourceStoreURL
                        options:options
                          error:&amp;error];
// Do error checking... Removed from the code sample.
NSManagedObjectContext *moc = [[NSManagedObjectContext alloc] init];
[moc setPersistentStoreCoordinator:psc];
[moc setUndoManager:nil];
</code></pre>

<h2>Get your entities from your original store, and create them in the new store</h2>

<p>You can&rsquo;t use your entity classes here, everything has to be done via KVC. This is because your entity classes will no longer map to the old model correctly.
    NSFetchRequest <em>oldFetchRequest = [[NSFetchRequest alloc] init];
    NSEntityDescription </em>oldEntity = [NSEntityDescription entityForName:@&ldquo;EntityName&rdquo;
                                                 inManagedObjectContext:oldContext];
    [oldFetchRequest setEntity:oldEntity];
    // Set the batch size so we don&rsquo;t attempt to retrieve all the data at once - this is the key to the whole thing!
    [oldFetchRequest setFetchBatchSize:10];</p>

<pre><code>NSError *error = nil;
NSArray *entities = [oldContext executeFetchRequest:oldFetchRequest error:&amp;error];
int count = 0;
for (NSManagedObject *oldEntity in entities) {
  // Creating new entity
  NSManagedObject *newEntity = [NSEntityDescription insertNewObjectForEntityForName:@"EntityName"
                                                             inManagedObjectContext:newContext];
  [newEntity setValue:[oldEntity valueForKey:@"someAttribute"] forKey:@"someAttribute"];

  // If your entity has relationships...
  for (NSManagedObject *aRelatedEntity in [oldEntity mutableSetValueForKey:@"someRelationship"]) {
    NSManagedObject *newRelatedEntity = [NSEntityDescription insertNewObjectForEntityForName:@"RelatedEntityName"
                                                                      inManagedObjectContext:newContext];
    [newRelatedEntity setValue:[aRelatedEntity valueForKey:@"someOtherAttribute"] forKey:@"someOtherAttribute"];
  }
  // Save periodically
  count++;
  if (count % 10 == 0) {
    [newContext save:&amp;error];
    // Do some error handling
  }
}
[newContext save:&amp;error];
// Do some error handling
// Migration is complete, if you've traversed all your entities.
</code></pre>

<p>When I encountered this problem I couldn&rsquo;t find any example code for how to do this migration - hopefully this helps someone.</p>

<p>If anyone does know of an alternative (better) way to get around this issue, please let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UISearchBar's UITextField]]></title>
    <link href="https://hamishrickerby.com/2012/05/19/uisearchbars-uitextfield/"/>
    <updated>2012-05-19T10:12:00+10:00</updated>
    <id>https://hamishrickerby.com/2012/05/19/uisearchbars-uitextfield</id>
    <content type="html"><![CDATA[<p>For an update that I&rsquo;m making to <a href="http://click.linksynergy.com/fs-bin/stat?id=*W1h7qYtoaI&amp;offerid=146261&amp;type=3&amp;subid=0&amp;tmpid=1826&amp;RD_PARM1=http%253A%252F%252Fitunes.apple.com%252Fus%252Fapp%252Fmoving-van%252Fid357418069%253Fmt%253D8%2526uo%253D4%2526partnerId%253D30">Moving Van</a> (<em>you should buy it now!</em>) I need to customise the font that is displayed in a UISearchBar&rsquo;s text field. The search bar does not actually expose it&rsquo;s UITextField property, but because the search bar is a UIView, it&rsquo;s trivial to access the field to allow customisation.</p>

<pre><code>for (UIView *searchSubview in mySearchBar.subviews) {
  if ([searchSubview isKindOfClass:[UITextField class]]) {
    // Do your text field customisation in here
    [(UITextField *)searchSubview setTextColor:[UIColor redColor]];
  }
}
</code></pre>

<p>HTH.</p>
]]></content>
  </entry>
  
</feed>
